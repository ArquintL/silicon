predicate P
  GlobalBranch:
    evaluate b
  Branch 1:
    Decider assert: !(b@0@00)
      Prover assert: !(b@0@00)
    Decider assert: b@0@00
      Prover assert: b@0@00
    produce acc(x.f, write)
      evaluate x
      evaluate write
      comment: Merge
        Single merge:  <= x@1@00.f -> $t@2@00 # W
  Branch 2:
    produce acc(x.g, write)
      evaluate x
      evaluate write
      comment: Merge
        Single merge:  <= x@1@00.g -> $t@3@00 # W

method test1
  WellformednessCheck null
    produce acc(P(b, x), write)
      evaluate b
      evaluate x
      evaluate write
      comment: Merge
        Single merge:  <= P($t@4@01; b@2@01,x@3@01) # W
  execute inhale (b ? acc(x.f, write) : acc(x.g, write))
    GlobalBranch:
      evaluate b
    Branch 1:
      Decider assert: !(b@2@01)
        Prover assert: !(b@2@01)
      Decider assert: b@2@01
        Prover assert: b@2@01
      produce acc(x.f, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@3@01.f -> $t@5@01 # W
      execute fold acc(P(b, x), write)
        evaluate b
        evaluate x
        evaluate write
        Decider assert: W == Z || True
          Prover assert: W == Z || True
        GlobalBranch:
          evaluate b
        Branch 1:
          Decider assert: !(b@2@01)
            Prover assert: !(b@2@01)
          Decider assert: b@2@01
          consume acc(x.f, write)
            evaluate write
            evaluate x
            Decider assert: W == Z || True
              Prover assert: W == Z || True
            Decider assert: True
            Decider assert: True
          comment: Merge
            Single merge:  <= P($t@5@01; b@2@01,x@3@01) # W
          consume acc(P(b, x), write)
            evaluate write
            evaluate b
            evaluate x
            Decider assert: W == Z || True
              Prover assert: W == Z || True
            Decider assert: True
            Decider assert: True
        Branch 2:
          comment: Unreachable
    Branch 2:
      produce acc(x.g, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@3@01.g -> $t@6@01 # W
      execute fold acc(P(b, x), write)
        evaluate b
        evaluate x
        evaluate write
        Decider assert: W == Z || True
          Prover assert: W == Z || True
        GlobalBranch:
          evaluate b
        Branch 1:
          comment: Unreachable
        Branch 2:
          Decider assert: !(b@2@01)
          consume acc(x.g, write)
            evaluate write
            evaluate x
            Decider assert: W == Z || True
              Prover assert: W == Z || True
            Decider assert: True
            Decider assert: True
          comment: Merge
            Single merge:  <= P($t@6@01; b@2@01,x@3@01) # W
          consume acc(P(b, x), write)
            evaluate write
            evaluate b
            evaluate x
            Decider assert: W == Z || True
              Prover assert: W == Z || True
            Decider assert: True
            Decider assert: True

method test2
  WellformednessCheck null
    produce acc(P(b, x), write)
      evaluate b
      evaluate x
      evaluate write
      comment: Merge
        Single merge:  <= P($t@11@01; b@9@01,x@10@01) # W
  execute var a: Int
  execute inhale (b ==> acc(x.f, write)) && (!b ==> acc(x.g, write))
    GlobalBranch:
      evaluate b
    Branch 1:
      Decider assert: !(b@9@01)
        Prover assert: !(b@9@01)
      Decider assert: b@9@01
        Prover assert: b@9@01
      produce acc(x.f, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@10@01.f -> $t@14@01 # W
      GlobalBranch:
        evaluate !b
          evaluate b
      Branch 1:
        comment: Unreachable
      Branch 2:
        Decider assert: b@9@01
        execute a := 1
          evaluate 1
        execute fold acc(P(b, x), write)
          evaluate b
          evaluate x
          evaluate write
          Decider assert: W == Z || True
            Prover assert: W == Z || True
          GlobalBranch:
            evaluate b
          Branch 1:
            Decider assert: !(b@9@01)
              Prover assert: !(b@9@01)
            Decider assert: b@9@01
            consume acc(x.f, write)
              evaluate write
              evaluate x
              Decider assert: W == Z || True
                Prover assert: W == Z || True
              Decider assert: True
              Decider assert: True
            comment: Merge
              Single merge:  <= P($t@14@01; b@9@01,x@10@01) # W
            consume acc(P(b, x), write)
              evaluate write
              evaluate b
              evaluate x
              Decider assert: W == Z || True
                Prover assert: W == Z || True
              Decider assert: True
              Decider assert: True
          Branch 2:
            comment: Unreachable
    Branch 2:
      GlobalBranch:
        evaluate !b
          evaluate b
      Branch 1:
        Decider assert: b@9@01
          Prover assert: b@9@01
        Decider assert: !(b@9@01)
        produce acc(x.g, write)
          evaluate x
          evaluate write
          comment: Merge
            Single merge:  <= x@10@01.g -> $t@15@01 # W
        execute a := 1
          evaluate 1
        execute fold acc(P(b, x), write)
          evaluate b
          evaluate x
          evaluate write
          Decider assert: W == Z || True
            Prover assert: W == Z || True
          GlobalBranch:
            evaluate b
          Branch 1:
            comment: Unreachable
          Branch 2:
            Decider assert: !(b@9@01)
            consume acc(x.g, write)
              evaluate write
              evaluate x
              Decider assert: W == Z || True
                Prover assert: W == Z || True
              Decider assert: True
              Decider assert: True
            comment: Merge
              Single merge:  <= P($t@15@01; b@9@01,x@10@01) # W
            consume acc(P(b, x), write)
              evaluate write
              evaluate b
              evaluate x
              Decider assert: W == Z || True
                Prover assert: W == Z || True
              Decider assert: True
              Decider assert: True
      Branch 2:
        comment: Unreachable

method test3
  WellformednessCheck null
  execute var a: Int
  execute inhale b ==> acc(x.f, write)
    GlobalBranch:
      evaluate b
    Branch 1:
      Decider assert: !(b@18@01)
        Prover assert: !(b@18@01)
      Decider assert: b@18@01
        Prover assert: b@18@01
      produce acc(x.f, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@19@01.f -> $t@21@01 # W
      execute a := 1
        evaluate 1
    Branch 2:
      execute a := 1
        evaluate 1

method test4
  GlobalBranch:
    evaluate b
  Branch 1:
    Decider assert: !(b@25@01)
      Prover assert: !(b@25@01)
    Decider assert: b@25@01
      Prover assert: b@25@01
    produce acc(x.f, write)
      evaluate x
      evaluate write
      comment: Merge
        Single merge:  <= x@26@01.f -> $t@27@01 # W
    WellformednessCheck null
    execute var a: Int
    execute a := 1
      evaluate 1
  Branch 2:
    WellformednessCheck null
    execute var a: Int
    execute a := 1
      evaluate 1

method test5
  WellformednessCheck null
  execute var a: Int
  execute inhale b1 ==> acc(x.f, write)
    GlobalBranch:
      evaluate b1
    Branch 1:
      Decider assert: !(b1@34@01)
        Prover assert: !(b1@34@01)
      Decider assert: b1@34@01
        Prover assert: b1@34@01
      produce acc(x.f, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@36@01.f -> $t@38@01 # W
      execute inhale b2 ==> acc(x.f, write)
        GlobalBranch:
          evaluate b2
        Branch 1:
          Decider assert: !(b2@35@01)
            Prover assert: !(b2@35@01)
          Decider assert: b2@35@01
            Prover assert: b2@35@01
          produce acc(x.f, write)
            evaluate x
            evaluate write
            comment: Merge
              Single merge: x@36@01.f -> $t@38@01 # W <= x@36@01.f -> $t@39@01 # W
          execute a := 1
            evaluate 1
        Branch 2:
          execute a := 1
            evaluate 1
    Branch 2:
      execute inhale b2 ==> acc(x.f, write)
        GlobalBranch:
          evaluate b2
        Branch 1:
          Decider assert: !(b2@35@01)
            Prover assert: !(b2@35@01)
          Decider assert: b2@35@01
            Prover assert: b2@35@01
          produce acc(x.f, write)
            evaluate x
            evaluate write
            comment: Merge
              Single merge:  <= x@36@01.f -> $t@42@01 # W
          execute a := 1
            evaluate 1
        Branch 2:
          execute a := 1
            evaluate 1

method test5a
  WellformednessCheck null
  execute var a: Int
  Branch 1:
    evaluate b1
    Decider assert: !(b1@47@01)
      Prover assert: !(b1@47@01)
    Decider assert: b1@47@01
      Prover assert: b1@47@01
    execute inhale acc(x.f, write)
      produce acc(x.f, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@49@01.f -> $t@51@01 # W
    Branch 1:
      evaluate b2
      Decider assert: !(b2@48@01)
        Prover assert: !(b2@48@01)
      Decider assert: b2@48@01
        Prover assert: b2@48@01
      execute inhale acc(x.f, write)
        produce acc(x.f, write)
          evaluate x
          evaluate write
          comment: Merge
            Single merge: x@49@01.f -> $t@51@01 # W <= x@49@01.f -> $t@52@01 # W
      execute a := 1
        evaluate 1
    Branch 2:
      evaluate !b2
        evaluate b2
      Decider assert: b2@48@01
        Prover assert: b2@48@01
      Decider assert: !(b2@48@01)
        Prover assert: !(b2@48@01)
      execute a := 1
        evaluate 1
  Branch 2:
    evaluate !b1
      evaluate b1
    Decider assert: b1@47@01
      Prover assert: b1@47@01
    Decider assert: !(b1@47@01)
      Prover assert: !(b1@47@01)
    Branch 1:
      evaluate b2
      Decider assert: !(b2@48@01)
        Prover assert: !(b2@48@01)
      Decider assert: b2@48@01
        Prover assert: b2@48@01
      execute inhale acc(x.f, write)
        produce acc(x.f, write)
          evaluate x
          evaluate write
          comment: Merge
            Single merge:  <= x@49@01.f -> $t@53@01 # W
      execute a := 1
        evaluate 1
    Branch 2:
      evaluate !b2
        evaluate b2
      Decider assert: b2@48@01
        Prover assert: b2@48@01
      Decider assert: !(b2@48@01)
        Prover assert: !(b2@48@01)
      execute a := 1
        evaluate 1

method test5b
  WellformednessCheck null
  execute var a: Int
  execute inhale (b1 ? acc(x.f, write) : true)
    GlobalBranch:
      evaluate b1
    Branch 1:
      Decider assert: !(b1@57@01)
        Prover assert: !(b1@57@01)
      Decider assert: b1@57@01
        Prover assert: b1@57@01
      produce acc(x.f, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@59@01.f -> $t@61@01 # W
      execute inhale (b2 ? acc(x.f, write) : true)
        GlobalBranch:
          evaluate b2
        Branch 1:
          Decider assert: !(b2@58@01)
            Prover assert: !(b2@58@01)
          Decider assert: b2@58@01
            Prover assert: b2@58@01
          produce acc(x.f, write)
            evaluate x
            evaluate write
            comment: Merge
              Single merge: x@59@01.f -> $t@61@01 # W <= x@59@01.f -> $t@62@01 # W
          execute a := 1
            evaluate 1
        Branch 2:
          produce true
            evaluate true
          execute a := 1
            evaluate 1
    Branch 2:
      produce true
        evaluate true
      execute inhale (b2 ? acc(x.f, write) : true)
        GlobalBranch:
          evaluate b2
        Branch 1:
          Decider assert: !(b2@58@01)
            Prover assert: !(b2@58@01)
          Decider assert: b2@58@01
            Prover assert: b2@58@01
          produce acc(x.f, write)
            evaluate x
            evaluate write
            comment: Merge
              Single merge:  <= x@59@01.f -> $t@65@01 # W
          execute a := 1
            evaluate 1
        Branch 2:
          produce true
            evaluate true
          execute a := 1
            evaluate 1

method test6
  WellformednessCheck null
  execute var a: Int
  execute inhale (b1 ? acc(x.f, write) : acc(x.g, write))
    GlobalBranch:
      evaluate b1
    Branch 1:
      Decider assert: !(b1@70@01)
        Prover assert: !(b1@70@01)
      Decider assert: b1@70@01
        Prover assert: b1@70@01
      produce acc(x.f, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@72@01.f -> $t@74@01 # W
      execute inhale (b2 ? acc(x.f, write) : acc(x.g, write))
        GlobalBranch:
          evaluate b2
        Branch 1:
          Decider assert: !(b2@71@01)
            Prover assert: !(b2@71@01)
          Decider assert: b2@71@01
            Prover assert: b2@71@01
          produce acc(x.f, write)
            evaluate x
            evaluate write
            comment: Merge
              Single merge: x@72@01.f -> $t@74@01 # W <= x@72@01.f -> $t@75@01 # W
          execute a := 1
            evaluate 1
        Branch 2:
          produce acc(x.g, write)
            evaluate x
            evaluate write
            comment: Merge
              Single merge: x@72@01.f -> $t@74@01 # W <= x@72@01.g -> $t@76@01 # W
          execute a := 1
            evaluate 1
    Branch 2:
      produce acc(x.g, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@72@01.g -> $t@77@01 # W
      execute inhale (b2 ? acc(x.f, write) : acc(x.g, write))
        GlobalBranch:
          evaluate b2
        Branch 1:
          Decider assert: !(b2@71@01)
            Prover assert: !(b2@71@01)
          Decider assert: b2@71@01
            Prover assert: b2@71@01
          produce acc(x.f, write)
            evaluate x
            evaluate write
            comment: Merge
              Single merge: x@72@01.g -> $t@77@01 # W <= x@72@01.f -> $t@78@01 # W
          execute a := 1
            evaluate 1
        Branch 2:
          produce acc(x.g, write)
            evaluate x
            evaluate write
            comment: Merge
              Single merge: x@72@01.g -> $t@77@01 # W <= x@72@01.g -> $t@79@01 # W
          execute a := 1
            evaluate 1

method test7
  WellformednessCheck null
  execute var a: Int
  execute inhale (b ? acc(x.f, write) : acc(x.g, write))
    GlobalBranch:
      evaluate b
    Branch 1:
      Decider assert: !(b@82@01)
        Prover assert: !(b@82@01)
      Decider assert: b@82@01
        Prover assert: b@82@01
      produce acc(x.f, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@83@01.f -> $t@85@01 # W
      execute a := 1
        evaluate 1
    Branch 2:
      produce acc(x.g, write)
        evaluate x
        evaluate write
        comment: Merge
          Single merge:  <= x@83@01.g -> $t@86@01 # W
      execute a := 1
        evaluate 1

method
  execute
    produce
      produce
        evaluate
      produce
        produce
          evaluate
        produce
          produce
            evaluate
          GlobalBranch
            produce
              evaluate
              evaluate
            execute
              evaluate
            produce
              evaluate
              evaluate
            execute
              evaluate

