method twice
  produce i >= 0
    evaluate i >= 0
      evaluate i
      evaluate 0
  WellformednessCheck null
    produce r == 2 * i
      evaluate r == 2 * i
        evaluate r
        evaluate 2 * i
          evaluate 2
          evaluate i
  execute r := 2 * i
    evaluate 2 * i
      evaluate 2
      evaluate i
  consume r == 2 * i
    evaluate r == 2 * i
      evaluate r
      evaluate 2 * i
        evaluate 2
        evaluate i

method m1
  WellformednessCheck null
  execute var a: Int
  execute a := 1
    evaluate 1
  execute: a := twice(1 + 1)
    precondition: consume i >= 0
      evaluate i >= 0
        evaluate i
        evaluate 0
    postcondition: produce r == 2 * i
      evaluate r == 2 * i
        evaluate r
        evaluate 2 * i
          evaluate 2
          evaluate i
    parameter: evaluate 1 + 1
      evaluate 1
      evaluate 1
  execute a := 2
    evaluate 2

method m2
  WellformednessCheck null
  execute var a: Int
  Branch 1:
    evaluate b
    SMT assert: !(b@13@01)
    SMT assert: b@13@01
    execute: a := twice(2)
      precondition: consume i >= 0
        evaluate i >= 0
          evaluate i
          evaluate 0
      postcondition: produce r == 2 * i
        evaluate r == 2 * i
          evaluate r
          evaluate 2 * i
            evaluate 2
            evaluate i
      parameter: evaluate 2
    execute: a := twice(4)
      precondition: consume i >= 0
        evaluate i >= 0
          evaluate i
          evaluate 0
      postcondition: produce r == 2 * i
        evaluate r == 2 * i
          evaluate r
          evaluate 2 * i
            evaluate 2
            evaluate i
      parameter: evaluate 4
  Branch 2:
    evaluate !b
      evaluate b
    SMT assert: b@13@01
    SMT assert: !(b@13@01)
    execute: a := twice(3)
      precondition: consume i >= 0
        evaluate i >= 0
          evaluate i
          evaluate 0
      postcondition: produce r == 2 * i
        evaluate r == 2 * i
          evaluate r
          evaluate 2 * i
            evaluate 2
            evaluate i
      parameter: evaluate 3
    execute: a := twice(4)
      precondition: consume i >= 0
        evaluate i >= 0
          evaluate i
          evaluate 0
      postcondition: produce r == 2 * i
        evaluate r == 2 * i
          evaluate r
          evaluate 2 * i
            evaluate 2
            evaluate i
      parameter: evaluate 4

