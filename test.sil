field f:Int
field g:Int

predicate pred(r:Ref) {
    acc(r.f)
}

predicate pred2(r:Ref, i:Int) {
    acc(r.f) && r.f == i
}

predicate empty() { true }

/*
method p_test(x: Ref)
  requires acc(pred(x))
  //ensures acc(pred(x))
{
  unfold pred(x)
  x.f := 0
  //fold pred(x)
}*/

method qp_test(x: Ref, xs: Seq[Ref])
  requires x in xs
  requires forall r:Ref :: r in xs ==> acc(pred(r))
  //ensures acc(pred(x))
{
  unfold pred(x)
  x.f := 1
  fold pred(x)
  unfold pred(x)
  //assert (x.f == 1)
}