field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function loc_limited(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int

  axiom limited {
    forall a: IArray, i: Int :: {loc(a, i)}
      loc(a,i) == loc_limited(a,i)
  }

  axiom all_diff {
    forall a: IArray, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: IArray :: len(a) >= 0
  }
}

predicate p(a: IArray, i:Int)
{
	acc(loc(a, i).val)
}

method test01(a: IArray, n: Int, i1: Int, i2:Int)
  requires n > 3
  requires forall i: Int :: i > 0 && i < n ==> acc(p(a, i+1))
  ensures  forall i: Int :: i > 0 && i < n  ==> acc(p(a,i+1))
  //ensures  forall i: Int :: i >= 2 && i < n ==> acc(p(a,i+1))
{}

/*
method test02(a: IArray, n: Int, i1: Int, i2:Int)
  requires n > 3
  requires forall i: Int :: i > 0 && i < n ==> acc(loc(a, i+1).val)
  ensures  forall i: Int :: i > 0 && i < n  ==> acc(loc(a, i+1).val)
 //ensures  forall i: Int :: i >= 2 && i < n ==> acc(loc(a, i+1).val)
{}*/